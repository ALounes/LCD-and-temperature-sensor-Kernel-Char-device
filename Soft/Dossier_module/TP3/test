#include <linux/init.h>
#include <linux/module.h>
#include <linux/moduleparam.h>
//#include <linux/kernel.h>       /* printk() */
//#include <linux/slab.h>         /* kmalloc() */
//#include <linux/fs.h>           /* everything... */
//#include <linux/errno.h>        /* error codes */
//#include <linux/types.h>        /* size_t */
#include <linux/proc_fs.h>      /* MKDEV,register_chrdev_region, alloc_chrdev_region,MAJOR */
#include <linux/ioport.h>
#include <linux/interrupt.h>

#include <linux/fcntl.h>        /* O_ACCMODE */
#include <linux/seq_file.h>
#include <linux/cdev.h>
//#include <asm/system.h>         /* cli(), *_flags */
#include <asm/uaccess.h>        /* copy_*_user */
#include <asm/io.h>
#include <linux/delay.h>  /* udelay */

#include "lcd.h"

void tme_tempo(int d);                   //delay function
void PORT_INIT(void);                    //parallel port initialization
void LCD_INIT(void);                     //LCD initialization
void LCD_CMD(unsigned char data);        //write to LCD command register
void LCD_DATA(unsigned char data);       //write to LCD data register
void LCD_STRING(unsigned char *string);  //write string to LCD
void LCD_CLEAR(void);                    //clear LCD and home cursor
void LCD_HOME(void);                     //home cursor on LCD
void LCD_LINE2(void);                    //move cursor to line 2, position 1
void LCD_RS_HIGH(void);
void LCD_RS_LOW(void);
void LCD_E_HIGH(void);
void LCD_E_LOW(void);

void DS1620_CONFIG(unsigned char data);          //DS1620 configuration
void DS1620_WRITECOMMAND(unsigned char command); //Write command to DS1620
void DS1620_WRITEDATA(int data);                 //Write data to DS1620
int DS1620_READ(void);                          //Read data from DS1620
void DS1620_RESET_HIGH(void);
void DS1620_RESET_LOW(void);
void DS1620_CLK_HIGH(void);
void DS1620_CLK_LOW(void);
void DS1620_DATA_HIGH(void);
void DS1620_DATA_LOW(void);
int powerof2(int);

#define LCD_NR_PORTS	3

MODULE_LICENSE("Dual BSD/GPL");

/*
 * all of the parameters have no "shortp_" prefix, to save typing when
 * specifying them at load time
 */
static int major = 124; /* dynamic by default */
module_param(major, int, 0);

/* default is the first printer port on PC's. "shortp_base" is there too
   because it's what we want to use in the code */
static unsigned long base = 0x378;
unsigned long shortp_base = 0;
module_param(base, long, 0);

unsigned char kernel_buf[100];

void tme_tempo(int d)
{
	udelay(d<<10);
}

/* Initialize LCD - 8 bit interface, 2 lines, 5x7 dots */

void LCD_INIT(void)
{
	LCD_CMD(0x38);
	LCD_CMD(0x38);
	LCD_CMD(0x38);
	LCD_CMD(0x0C);
	LCD_CMD(0x06);
}

/* Write 8-bit data to LCD command register */

void LCD_CMD(unsigned char data)
{
	LCD_DATA(data);
	LCD_RS_LOW();
	tme_tempo(1);
	LCD_E_LOW();
	tme_tempo(1);
	LCD_E_HIGH();
	tme_tempo(1);
}

void LCD_CHAR(unsigned char data)
{
	LCD_DATA(data);
	LCD_RS_HIGH();
	tme_tempo(1);
	LCD_E_LOW();
	tme_tempo(1);
	LCD_E_HIGH();
	tme_tempo(1);
}

/* Write 8-bit data to LCD data register */

void LCD_DATA(unsigned char data)
{
	outb(data,base);
}

/* Write string to LCD */

void LCD_STRING(unsigned char *string)
{
	while(*string)
	{
		LCD_CHAR(*string);
		string++;
	}
}

/* Clear LCD and home cursor */

void LCD_CLEAR(void)
{
	LCD_CMD(0x01);
}

/* Home cursor on LCD */

void LCD_HOME(void)
{
	LCD_CMD(0x02);
}

/* Move cursor to line 2, position 1 */

void LCD_LINE2(void)
{
	//LCD_CMD(0x02);
}

/* Configure DS1620 chip */

void DS1620_CONFIG(unsigned char data)
{
}

/* Write 8-bit command to DS1620 */

void DS1620_WRITECOMMAND(unsigned char command)
{
	int i = 0;

	while(i < 8)
	{
		DS1620_CLK_LOW();
		tme_tempo(1);
		if(command & 1)
		{
			DS1620_DATA_HIGH();
		}
		else
		{
			DS1620_DATA_LOW();
		}
		tme_tempo(1);
		DS1620_CLK_HIGH();
		tme_tempo(1);
		command = command >> 1;
		i++;
	}
}

/* Write 9-bit data to DS1620
   Chip ignores bit 8 if not needed */

void DS1620_WRITEDATA(int data)
{
}

/* Read 9 bits of data from DS1620 chip */

int DS1620_READ(void)
{
	int temperature=0;
	int i=0;

	DS1620_DATA_HIGH();
	tme_tempo(2);

	while(i < 9)
	{
		DS1620_CLK_LOW();
		tme_tempo(1);
		if (inb(base+1) & 0x40)
		{
			temperature+=1<<i;
		}
		else
		{
		}
	
		tme_tempo(1);
		DS1620_CLK_HIGH();
		tme_tempo(1);
		i++;
	}

	return temperature;
}

/* LCD RS input high */

void LCD_RS_HIGH(void)
{
	outb(inb(0x37A)&0xfd,0x37A);
}

/* LCD RS input low */

void LCD_RS_LOW(void)
{
	outb(inb(0x37A)|2,0x37A);
}

/* LCD ENABLE input high */

void LCD_E_HIGH(void)
{
	outb(inb(0x37A)&0xFE,0x37A);
}

/* LCD ENABLE input low */

void LCD_E_LOW(void)
{
	outb(inb(0x37A)|1,0x37A);
}

/* DS1620 RESET input high */

void DS1620_RESET_HIGH(void)
{
	outb(inb(0x37A)|(1<<2),0x37A);
}
/* Set DS1620 RESET input low */

void DS1620_RESET_LOW(void)
{
	outb(inb(0x37A)&~(1<<2),0x37A);
}

/* Set DS1620 CLK input high */

void DS1620_CLK_HIGH(void)
{
	outb(inb(0x37A)&~(1<<3),0x37A);
}

/* Set DS1620 CLK input low */

void DS1620_CLK_LOW(void)
{
	outb(inb(0x37A)|(1<<3),0x37A);
}

/* Set DS1620 DATA input high */

void DS1620_DATA_HIGH(void)
{
	outb(inb(0x37A)&~(1<<1),0x37A);
}

/* Set DS1620 DATA input low */

void DS1620_DATA_LOW(void)
{
	outb(inb(0x37A)|(1<<1),0x37A);
}

int powerof2(int nb)
{
        int res=1;
        int i;

        for (i=0;i<nb;i++)
                res*=2;
        return res;
}

int lcd_open(struct inode *inode, struct file *filp)
{
	if (MINOR(inode->i_rdev) != 0){
		printk("Lcd_c : mauvais numero d'unite\n");
		return -EINVAL;
	}

	LCD_INIT();
	DS1620_WRITECOMMAND(0xEE);	

	return 0;
}

int lcd_release(struct inode *inode, struct file *filp)
{
        printk(KERN_INFO "lcd: release\n");
        return 0;
}

ssize_t lcd_read(struct file *filp, char __user *user_buf, size_t count,
                loff_t *f_pos)
{
	int temperature;
	char str_temp[10];
	int status = 0;
	
	if(status == 0)
	{
		DS1620_RESET_HIGH();
		DS1620_WRITECOMMAND(READTEMP);
		temperature = DS1620_READ();
		DS1620_RESET_LOW();
		tme_temp(1000);

		str_temp = sprintf("%d", temperature);
		copy_to_user(user_buf, str_temp, count);
		status = 1;
	}
	else if(status == 1)
	{
		status = 0;
	}

	printk("lcd: read\n");
	
	return 0;
}

ssize_t lcd_write(struct file *filp, const char __user *user_buf, size_t count,
                loff_t *f_pos)
{
	if(count > 16)
		count = 16;
	
	copy_from_user(kernel_buf, user_buf, count);
	kernel_buf[count] = "\0";
	LCD_STRING(user_buf);
	printk("lcd: write\n");

    return count;
}

int lcd_ioctl(struct inode *inode, struct file *filp,
                 unsigned int cmd, unsigned long arg)
{
        return 0;
}

struct file_operations lcd_fops = {
        .owner =    THIS_MODULE,
        .read =     lcd_read,
        .write =    lcd_write,
        //.ioctl =    lcd_ioctl,
        .open =     lcd_open,
        .release =  lcd_release,
	//.llseek = no_llseek,
};

static int lcd_init(void)
{
    int result;
	int err = 0;

	shortp_base = base;
	
	//request_region(base,3,"lcd");
	if((err = register_chrdev(124, "lcd", &lcd_fops)) != 0)
	{
		printk("*** unable to get major LCD_MAJOR for lcd devices ***\n");
	}

	printk(KERN_ALERT "lcd:lcd_init\n");
	printk(KERN_ALERT "lcd:basePortAddress is 0x%lx\n", shortp_base);

	return err;
}

static void lcd_exit(void)
{
	unregister_chrdev(124,"lcd");
	//release_region(base,3);
	printk(KERN_ALERT "lcd:lcd_exit\n");
}

module_init(lcd_init);
module_exit(lcd_exit);
